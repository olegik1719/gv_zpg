package com.github.olegik1719.godville.arena.common;

import com.github.olegik1719.godville.arena.chronicgetters.AnyChronicGetter;
import com.github.olegik1719.godville.arena.chronicgetters.ChronicGetter;
import lombok.Getter;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Getter
public class SailParser {
    private static final SimpleDateFormat LOG_DATE_FORMATTER = new SimpleDateFormat("dd.MM.yyyy hh:mm X");

    private static String[] smallFishGet ={
            ".+ –ø–æ—Å–ª–∞–Ω–∞ –Ω–∞ –¥–Ω–æ –º–æ—Ä—Å–∫–æ–µ\\. %hero% –Ω–∞—Ö–æ–¥–∏—Ç —Å—É–Ω–¥—É—á–æ–∫\\. üì¶$",
            "–û—Å–≤–æ–±–æ–∂–¥—ë–Ω–Ω–∞—è –æ—Ç –≥—Ä—É–∑–∞ .+ –∫–∞–º–Ω–µ–º –ø–∞–¥–∞–µ—Ç –Ω–∞ –¥–Ω–æ\\. %hero% –Ω–∞—Ö–æ–¥–∏—Ç –ª–∞—Ä–µ—Ü\\. üì¶$",
    };

    private static String[] smallIcelandGet ={
            "–ù–µ –∂–µ–ª–∞—è –ø–ª–∞–≤–∞—Ç—å —Å –ø—É—Å—Ç—ã–º —Ç—Ä—é–º–æ–º, %hero% –æ—Ç–±–∏—Ä–∞–µ—Ç —É —Ç—É–∑–µ–º—Ü–µ–≤ —Å—É–Ω–¥—É—á–æ–∫ —Å —á–µ–º-—Ç–æ —Ü–µ–Ω–Ω—ã–º\\. üì¶$",
            "%hero% –ø—Ä–æ—Å–∏—Ç —É —Ç—É–∑–µ–º—Ü–µ–≤ –ø—Ä–æ–≤–∏–∑–∏–∏, –Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –≤–º–µ—Å—Ç–æ –µ–¥—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –ª–∞—Ä–µ—Ü\\. üì¶$",
    };

    private static String[] bigFishGet ={
            "–° –ø–æ—Å–ª–µ–¥–Ω–∏–º —É–¥–∞—Ä–æ–º —Ç–≤–∞—Ä—å –æ–±–µ—Ä–Ω—É–ª–∞—Å—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π —Å–∞–º–∫–æ–π, –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∞ –∑–∞ —Å–ø–∞—Å–µ–Ω–∏–µ –æ—Ç –∫–æ–ª–¥–æ–≤—Å–∫–∏—Ö —á–∞—Ä –∏ –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –µ—ë –ø—Ä–∏—é—Ç–∏—Ç—å. %hero% –Ω–µ –ø—Ä–æ—á—å\\. ‚ôÄ$",
            "–∑–∞—Ö–ª–µ–±–Ω—É–ª–∞—Å—å. %hero% –≤—ã—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏–∑ –º–æ—Ä—Å–∫–æ–π –ø—É—á–∏–Ω—ã –∫–ª–∞–¥\\. üí∞$",
            "–∏–¥—ë—Ç –Ω–∞ –¥–Ω–æ, –∞ %hero% ‚Äî –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∞–¥\\. üí∞$",
            "%hero% –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç —Å–∞–º–∫—É, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç—å —Ü–µ–Ω–Ω—ã–π –º–µ—Ö —Ä–∂–∞–≤—ã–º –±–∞–≥—Ä–æ–º\\. ‚ôÄ$",
            "%hero% –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —Å–∞–º–∫–µ –≤–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ –∫–æ–≤—á–µ–≥, –Ω–æ .+\\. ‚ôÄ$",
            "–ü–æ–≤–µ—Ä–∂–µ–Ω–Ω–∞—è .+ –≤—ã—Ç–∞—â–µ–Ω–∞ –Ω–∞ –ø–∞–ª—É–±—É, –∏ –≤ –µ—ë –±—Ä—é—Ö–µ %hero% –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–ª–∞–¥\\. üí∞$",
            "–ü–æ–±–µ–¥–∏–≤ —á—É–¥–æ–≤–∏—â–µ, %hero% –ø–æ–ª—É—á–∞–µ—Ç —Å–∞–º–æ—á–∫—É –∑–∞ –∏—Å–ø—É–≥\\. ‚ôÄ$",
            "–ò–∑—è—â–Ω–∞—è —Å–∞–º–∫–∞ –≥—Ä–∞—Ü–∏–æ–∑–Ω–æ –∑–∞–ø–ª—ã–≤–∞–µ—Ç –≤ —Ç—Ä—é–º –∫–æ–≤—á–µ–≥–∞ –∏ —Å—Ä–∞–∑—É –∂–µ —Ç—Ä–µ–±—É–µ—Ç –µ–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å\\. ‚ôÄ$",
            ".+ —Ç–æ–Ω–µ—Ç, –∏—Å–ø—É—Å—Ç–∏–≤ –ø—Ä–æ—â–∞–ª—å–Ω—ã–π –∫—Ä–∏–∫ –∏ –∫–ª–∞–¥\\. üí∞$",
    };

    private static String[] bigIcelandGet = {
            "–•–æ—Ç—è –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–∞–º–Ω–µ –≥–ª–∞—Å–∏—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –∑–∞—Ä—ã—Ç–∞ —Å–æ–±–∞–∫–∞, %hero% –≤—ã–∫–∞–ø—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º—Ü–∞\\. ‚ôÇ$",
            "–í—ã–∫–æ–ø–∞–≤ —Å—É–Ω–¥—É–∫ –∏ –∑–∞–∫–æ–ø–∞–≤ —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π, %hero% —É–Ω–æ—Å–∏—Ç –∫–ª–∞–¥ –Ω–∞ –∫–æ–≤—á–µ–≥. üí∞$",
            "%hero% —Ä–∞–¥–æ—Å—Ç–Ω–æ –∑–∞—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –æ—Ä—É—â–µ–≥–æ —á—Ç–æ-—Ç–æ –ø—Ä–æ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é —Å–∞–º—Ü–∞ –≤ –∫–æ–≤—á–µ–≥\\. ‚ôÇ$",
            "–ù–∞—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π—Å—è –æ—Ç —Ü–∞—Ä—è—â–µ–≥–æ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –º–∞—Ç—Ä–∏–∞—Ä—Ö–∞—Ç–∞ —Å–∞–º–µ—Ü —Å—Ç—Ä–µ–º–≥–ª–∞–≤ –Ω–µ—Å—ë—Ç—Å—è –Ω–∞ –∫–æ–≤—á–µ–≥ –∏ –∑–∞–ø–∏—Ä–∞–µ—Ç—Å—è –≤ —Ç—Ä—é–º–µ. %hero% –Ω–µ –≤–æ–∑—Ä–∞–∂–∞–µ—Ç\\. ‚ôÇ$",
            "–ö–ª–∞–¥! –û—Ç–±—Ä–æ—Å–∏–≤ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–∫–µ–ª–µ—Ç, %hero% —Ç–∞—â–∏—Ç –Ω–∞ –±–æ—Ä—Ç –∫–æ–≤—á–µ–≥–∞ —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏\\. üí∞$",
            "–° –∫—Ä–∏–∫–æ–º ¬´–°–∞–º–∫–∏!¬ª —Å–∫—É—á–∞–≤—à–∏–π –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –æ–¥–∏–Ω–æ–∫–∏–π —Å–∞–º–µ—Ü –ª–æ–º–∞–Ω—É–ª—Å—è –Ω–∞ –±–æ—Ä—Ç –∫–æ–≤—á–µ–≥–∞ –≥–µ—Ä–æ—è %hero%\\. ‚ôÇ$",
            "%hero% –Ω–µ —Ö–æ—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Å—Ç—Ä–æ–≤\\. –î–∞ –∏ –∑–∞—á–µ–º, –∫–æ–≥–¥–∞ –∫–ª–∞–¥ –≤–∞–ª—è–µ—Ç—Å—è –Ω–∞ –±–µ—Ä–µ–≥—É? üí∞$",
            "–ò–∑–º—É—á–µ–Ω–Ω—ã–π –∂–µ—Å—Ç–æ–∫–æ–π –±–æ—Ä—å–±–æ–π –∑–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ —Å–∞–º–µ—Ü –Ω–∞—Ö–æ–¥–∏—Ç —É–±–µ–∂–∏—â–µ –≤ –∫–æ–≤—á–µ–≥–µ –≥–µ—Ä–æ—è %hero%\\. ‚ôÇ$",
    };

    private static String[] escapes ={
            "%hero% –±–µ—Ä—ë—Ç —è–∫–æ—Ä—å –≤ —Ä—É–∫–∏ –∏ –ø–ª—ã–≤—ë—Ç –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\\.$",
            "–¢—Ä—É—Å–ª–∏–≤—ã–π %hero% –ø—ã—Ç–∞–µ—Ç—Å—è —É–ø–ª—ã—Ç—å –æ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –º–æ—Ä—è –ø–æ–∫–æ—Ä—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–º–µ–ª—ã–º\\.$",
            "%hero% —Ö–≤–∞—Ç–∞–µ—Ç –Ω–æ–≥–∏ –≤ —Ä—É–∫–∏, –Ω–æ –æ—Ç–ø—É—Å–∫–∞–µ—Ç —à—Ç—É—Ä–≤–∞–ª –∏ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ\\.$",
            "%hero% —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ –ø–æ–¥–Ω—è–≤—à–µ–π—Å—è –≤–æ–ª–Ω–æ–π –∏ —É—Ö–æ–¥–∏—Ç –∏–∑ –±–æ—è\\.$",
            "%hero% —Å–∫—Ä—É—á–µ–Ω –ø—Ä–∏—Å—Ç—É–ø–æ–º –ø–∞—Ü–∏—Ñ–∏–∑–º–∞ –∏ –≤—ã–Ω—É–∂–¥–µ–Ω –æ—Ç—Å—Ç—É–ø–∏—Ç—å\\.$",
            "%hero% –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –Ω–∞–¥–æ –±–µ–∂–∞—Ç—å, –Ω–æ –ø–æ–∑–æ—Ä–∏—Ç—å –∞–¥–º–∏—Ä–∞–ª—å—Å–∫–∏–π –º—É–Ω–¥–∏—Ä –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤\\.$",
            "%hero% –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—É—Å–∞ –∏ –¥–∞–∂–µ —Ç–µ–ª—å–Ω—è—à–∫—É, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –±–æ—è\\.$",
            "%hero% –ø—Ä–æ–±—É–µ—Ç —Å–∫—Ä—ã—Ç—å—Å—è, –Ω–æ –≤ –º–æ—Ä–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è —Å–ª–æ–∂–Ω–æ\\.$",
            "%hero% —Å—Ç–∞—Ä–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç —É–π—Ç–∏ –æ—Ç —Å—Ä–∞–∂–µ–Ω–∏—è\\.$",
            "%hero% –≤—ã–∂–∏–º–∞–µ—Ç –∏–∑ –∫–æ–≤—á–µ–≥–∞ –Ω–µ–º—ã—Å–ª–∏–º–æ–µ —á–∏—Å–ª–æ —É–∑–ª–æ–≤ –∏ —É–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ—á—å –∏–∑ –±–æ—è\\.$",
            "%hero% –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–±–µ–∂–∞—Ç—å –±–æ—è, –Ω–æ —à—Ç–∏–ª—å –º–µ—à–∞–µ—Ç —ç—Ç–∏–º –ø–ª–∞–Ω–∞–º.$",
            "%hero% —á—É—Ç—å –±—ã–ª–æ –Ω–µ —Å–ª–æ–º–∞–ª —à—Ç—É—Ä–≤–∞–ª, –Ω–æ –æ—Ç –≤—Ä–∞–≥–∞ —É—à—ë–ª\\.$",
            "–ò–∑–æ –≤—Å–µ—Ö —Å–∏–ª –¥—É—è –≤ –ø–∞—Ä—É—Å–∞, %hero% —É–ø–ª—ã–≤–∞–µ—Ç –ø—Ä–æ—á—å –æ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\\.$",
    };

    private static String[] empties = {
            "–ù–µ–ø–æ–¥–∞–ª—ë–∫—É —Ñ–æ–Ω—Ç–∞–Ω–∏—Ä—É–µ—Ç .+\\.$",
            ".+ –±—ã–ª–∞ –¥–∞ —Å–ø–ª—ã–ª–∞\\. %hero% –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É\\.$",
            ".+ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –∫–∞–∫ —Ä—ã–±–∞ –≤ –≤–æ–¥–µ\\.$",
            "–†–∞—Å–ø—É–≥–∞–≤ –≥–æ–≤–æ—Ä—è—â–∏—Ö –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —è–∑—ã–∫–∞—Ö —Ç—É–∑–µ–º—Ü–µ–≤, %hero% –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ —è—Ä—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∑–∏–∫–∫—É—Ä–∞—Ç–∞\\.$",
            "–ü–æ–∫–∞ %hero% –æ–±—Å–ª–µ–¥–æ–≤–∞–ª –æ—Å—Ç—Ä–æ–≤, –µ–≥–æ –∫–æ–≤—á–µ–≥ —É—Å–ø–µ–ª –ø—É—Å—Ç–∏—Ç—å –∫–æ—Ä–Ω–∏ –∏ –∑–∞—Ä–∞—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–æ–∏–Ω\\.$",
            "–í—ã—Å–∞–¥–∏–≤—à–∏—Å—å –Ω–∞ –æ–±–∏—Ç–∞–µ–º—ã–π –æ—Å—Ç—Ä–æ–≤, %hero% –æ—Ç–±–∏—Ä–∞–µ—Ç —É –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –ø—Ä–∏–ø–∞—Å—ã\\.$",
            "–û–¥–Ω–æ–∫–ª–µ—Ç–æ—á–Ω–∞—è .+ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç—å –¥–≤–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ\\.$",
            "–ò–∑ –ø—É—á–∏–Ω—ã –ø—É—á–∏—Ç –≥–ª–∞–∑–∞ .+\\.$",
            "–ù–∞ –¥–µ—Ä–µ–≤—å—è—Ö –æ—Å—Ç—Ä–æ–≤–∞ %hero% –Ω–∞—Ö–æ–¥–∏—Ç –±–µ–ª–æ–∫, –ø–æ–¥ –Ω–∏–º–∏ ‚Äî –∂–∏—Ä—ã, –∞ –≤ –ø–µ—â–µ—Ä–∞—Ö ‚Äî —É–≥–ª–µ–≤–æ–¥—ã\\.$",
            "%hero% –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ä—É–Ω—ã –¥—Ä—É–∏–¥–æ–≤ —Å–æ —Å–∫–∞–ª –æ—Å—Ç—Ä–æ–≤–∞ –Ω–∞ –±–æ—Ä—Ç –∫–æ–≤—á–µ–≥–∞, —É–ª—É—á—à–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ\\.$",
            "–°–æ —Å—Ç—Ä–µ–ª–æ–π –≤ –∑—É–±–∞—Ö –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –≤—ã–π—Ç–∏ –∑–∞–º—É–∂ –∫–æ–∫–µ—Ç–ª–∏–≤–æ –≤—Å–ø–ª—ã–≤–∞–µ—Ç .+\\.$",
            "–°—Ä–µ–¥–∏ —Ç–µ–∫—É—á–∏—Ö –≤–æ–¥ .+ –±–µ–ª–∞—è –ø–ª—ã–≤—ë—Ç\\.$",
            "%hero% –¥–æ–ª–≥–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞–ª–º–∞–∑–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—è—â–µ–≥–æ –≤ –Ω–µ–±–µ –æ—Å—Ç—Ä–æ–≤–∞, –ø–æ–∂–∏–º–∞–µ—Ç –ø–ª–µ—á–∞–º–∏ –∏ –ø–ª—ã–≤—ë—Ç –¥–∞–ª–µ–µ\\.$",
            "–ù–∞ —ç—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ —Å–≤–µ–∫—Ä–æ–≤–∏—â %hero% –ø–æ–ª—É—á–∞–µ—Ç —Å–∫–∞–ª–∫–æ–π –∏ –Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ –Ω–µ —à–∞–ª–∏—Ç—å\\.$",
            "–ù–∞ —Ñ–æ–Ω–µ –≤–æ–ª–Ω .+ –ø–æ—á—Ç–∏ –Ω–µ –≤–∏–¥–Ω–∞, –Ω–æ –æ–Ω–∞ –µ—Å—Ç—å\\.$",
            "–ó–∞–±—Ä–∞–≤—à–∏—Å—å –Ω–∞ –º–∞—è–∫, %hero% —Ä–∞–∑–≥–∞–¥—ã–≤–∞–µ—Ç –∑–∞–≥–∞–¥–∫—É —Å–µ–¥–æ–≥–æ —Å—Ç–∞—Ä—Ü–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π\\.$",
            ".+ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç —Å–≤–æ—é –∂–∏–∑–Ω—å –Ω–∞ –ø—Ä–æ–≤–∏–∑–∏—é\\.$",
            "–†–æ–≤–Ω—É—é –ª–∏–Ω–∏—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ª–æ–º–∞—é—Ç .+\\.$",
            ".+ –Ω–µ —Å–º–æ–≥–ª–∞ –∑–∞—â–∏—Ç–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É. %hero% —Ä–∞–¥—É–µ—Ç—Å—è –Ω–∞–∂–∏–≤–µ\\.$",
            "–î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–∞—è .+ —Ç–æ–Ω–µ—Ç –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—á–∞–ª–∏\\.$",
            "%hero% —Ü–µ–Ω–∏—Ç –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–æ–µ —á—É–¥–∏—â–µ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –Ω–æ –∏ –∑–∞ –±–æ–≥–∞—Ç—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∂–∏—Ä\\.$",
            "–ü–æ –º–æ—Ä—é –∞–∫–∏ –ø–æ —Å—É—Ö—É –ø—Ä–æ–≥—É–ª–∏–≤–∞–µ—Ç—Å—è .+\\.$",
            "–ù–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è .+\\.$",
            "–í–∑–æ–±—Ä–∞–≤—à–∏—Å—å –Ω–∞ –≥–æ—Ä—É, %hero% –ª—é–±—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã–≤—à–∏–º–∏—Å—è –≤–∏–¥–∞–º–∏\\.$",
            "–í–º–µ—Å—Ç–µ —Å –≤–æ–¥–æ–π –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω–∞—è .+ –≤—ã–ø–ª—ë—Å–∫–∏–≤–∞–µ—Ç –Ω–∞ –±–æ—Ä—Ç –∫–æ–≤—á–µ–≥–∞ –ø—Ä–æ–≤–∏–∑–∏—é\\.$",
            "–ü–æ–≤–µ—Ä–∂–µ–Ω–Ω–∞—è .+ –≤—ã—Ç–∞—â–µ–Ω–∞ –Ω–∞ –ø–∞–ª—É–±—É, –∏ –≤ –µ—ë –±—Ä—é—Ö–µ %hero% –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–∏–∑–∏—é\\.$",
            "–£—Ç–æ–ø–ª–µ–Ω–Ω–∞—è .+ –æ–±–º–µ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç\\.$",
            "–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –±–µ–ª—É–≥–æ–π –≤–æ–µ—Ç .+\\.$",
            "–û–¥–∏–Ω –≤–æ–¥–æ–≤–æ—Ä–æ—Ç –∑–∞—Å–∞—Å—ã–≤–∞–µ—Ç –∫–æ–≤—á–µ–≥ –∫–∞–ø–∏—Ç–∞–Ω–∞ %hero%, –∞ –¥—Ä—É–≥–æ–π —Ç—É—Ç –∂–µ –≤—ã—Å–∞—Å—ã–≤–∞–µ—Ç\\.$",
            ".+ ‚Äî –∏–∑ —Å–∞–º–æ–π –≥–ª—É–±–∏–Ω–∫–∏, –∞ –≤–æ–Ω –∫–∞–∫ –ø–æ–¥–Ω—è–ª–∞—Å—å\\.$",
            "%hero% –ø—Ä–µ–¥–≤–∫—É—à–∞–µ—Ç –∂–∏—Ä–Ω—ã–π –∫—É—à –∏, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è –Ω–æ–≤—ã–µ –∫–ª–∞–¥—ã —Å—Ç–∞—Ä—ã–º, –≤—ã–ø–∏—Ö–∏–≤–∞–µ—Ç –∑–∞ –±–æ—Ä—Ç .+\\.$",
            "%hero% –∑–∞–ø–æ–ª–Ω–∏–ª –∫–æ–≤—á–µ–≥ –¥–æ–±—ã—á–µ–π –¥–æ –æ—Ç–∫–∞–∑–∞\\.$",
            "%hero% –ª–∏—Ö–æ –∫—Ä—É–∂–∏—Ç—Å—è –≤ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç–µ –∏ –≤—ã–≤–∏–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º –∫—Ä–∞—é –∫–∞—Ä—Ç—ã\\.$",
            "–°—Ç–æ–ª–∫–Ω—É–≤—à–∏—Å—å —Å —á–∏—Ö–∞—é—â–∏–º –∫–∞—à–∞–ª–æ—Ç–æ–º, %hero% c –∫–æ—Ä–∞–±–ª—ë–º –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ–Ω–µ—Ü –∫–∞—Ä—Ç—ã\\.$",
            "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –≥–Ω–µ–≤, —Ç–æ—Ä–≥, –¥–µ–ø—Ä–µ—Å—Å–∏—è, –ø—Ä–∏–Ω—è—Ç–∏–µ –∏, –Ω–∞–∫–æ–Ω–µ—Ü, —Ç–µ–ª–µ–ø–æ—Ä—Ç –≤ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é ‚Äî %hero% –ø—Ä–æ—à—ë–ª —á–µ—Ä–µ–∑ –≤—Å—ë, –ø–æ–±—ã–≤–∞–≤ –≤ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç–µ\\.$",
            "–û—â—É—Ç–∏–≤ —Å–µ–±—è –Ω–∞ —Å–≤–æ–µ–π –≤–æ–ª–Ω–µ, %hero% —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –ø–æ –∫–∞—Ä—Ç–µ\\.$",
            "–ó–∞–ø–µ—Ä–µ–≤—à–∏—Å—å –≤ –∫–∞–ø–∏—Ç–∞–Ω—Å–∫–æ–π –∫–∞—é—Ç–µ, %hero% —Å–º–µ–ª–æ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç–∞\\.$",
            "%hero% —á—Ç–æ-—Ç–æ –∫—Ä–∏—á–∏—Ç, —É—Ü–µ–ø–∏–≤—à–∏—Å—å –∑–∞ –º–∞—á—Ç—É, –Ω–æ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç —Ä–∞–≤–Ω–æ–¥—É—à–Ω–æ —É–Ω–æ—Å–∏—Ç –∫–æ–≤—á–µ–≥ –Ω–∞ –¥—Ä—É–≥–æ–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã\\.$",
            "%hero% –æ–±—Ä–∞—â–∞–µ—Ç –∂–∏–≤—É—â–∏—Ö –∑–¥–µ—Å—å –¥–∏–∫–∞—Ä–µ–π –≤ —Å–≤–æ—é –≤–µ—Ä—É –∏ –≤–æ–∑–Ω–æ—Å–∏—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º–∏ –º–æ–ª–∏—Ç–≤—É\\.$",
            "%hero% –ª–∏—Ö–æ –∫—Ä—É–∂–∏—Ç—Å—è –≤ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç–µ –∏ –≤—ã–≤–∏–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º –∫—Ä–∞—é –∫–∞—Ä—Ç—ã\\.$",
            "–®—Ç–æ–ø–æ—Ä–æ–º –≤–≤–µ—Ä–Ω—É–≤—à–∏—Å—å –≤ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç, %hero% —Å–æ —Å–≤–æ–∏–º –∫–æ–≤—á–µ–≥–æ–º –ø—Ä–æ–±–∫–æ–π –≤—ã–ª–µ—Ç–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –º–æ—Ä—è\\.$",
            "%hero% —á—Ç–æ-—Ç–æ –∫—Ä–∏—á–∏—Ç, —É—Ü–µ–ø–∏–≤—à–∏—Å—å –∑–∞ –º–∞—á—Ç—É, –Ω–æ –≤–æ–¥–æ–≤–æ—Ä–æ—Ç —Ä–∞–≤–Ω–æ–¥—É—à–Ω–æ —É–Ω–æ—Å–∏—Ç –∫–æ–≤—á–µ–≥ –Ω–∞ –¥—Ä—É–≥–æ–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã\\.$",
            "%hero% –ø—Ä–µ–¥–≤–∫—É—à–∞–µ—Ç –∂–∏—Ä–Ω—ã–π –∫—É—à –∏, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è –Ω–æ–≤—ã–µ –∫–ª–∞–¥—ã —Å—Ç–∞—Ä—ã–º, –≤—ã–ø–∏—Ö–∏–≤–∞–µ—Ç –∑–∞ –±–æ—Ä—Ç –∫–ª–∞–¥\\.$",
            "%hero% –∑–∞–ø–æ–ª–Ω–∏–ª –∫–æ–≤—á–µ–≥ –¥–æ–±—ã—á–µ–π –¥–æ –æ—Ç–∫–∞–∑–∞\\.$",
            ".+ –≤—ã–ø–æ—Ç—Ä–æ—à–µ–Ω–∞ –∏ –≤—ã–±—Ä–æ—à–µ–Ω–∞, %hero% –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º–∫—É\\.$",
            "%hero% –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ —Ü–µ–ª—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–¥–æ–ª–æ–≤, —Å–≥—Ä–µ–±–∞–µ—Ç –∏—Ö –≤ –∫—É—á—É –∏ –º–æ–ª–∏—Ç—Å—è –≤—Å–µ–º —Å—Ä–∞–∑—É\\.$",
            ".+ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–ª—ã–≤–∞\\.$",
            ".+ –ª–æ–ø–∞–µ—Ç—Å—è, –∑–∞–±—Ä—ã–∑–≥–∞–≤ –≤—Å—ë –≤–æ–∫—Ä—É–≥ –ª–µ—á–µ–±–Ω—ã–º —Ä—ã–±—å–∏–º –∂–∏—Ä–æ–º\\.$",
            "–ù–µ–ø–æ–¥–∞–ª—ë–∫—É .+ –≤–µ–¥—ë—Ç —Å–µ–±—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–≤–∞—Ä—å\\.$",
            "–ó–∞–º–µ—Ç–∏–≤, —á—Ç–æ —ç—Ç–æ—Ç –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤ —É–∂–µ –Ω–∞ –≥—Ä–∞–Ω–∏ –∏–∑–≤–µ—Ä–∂–µ–Ω–∏—è, %hero% –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è –µ–≥–æ –æ–±—ã—Å–∫–∏–≤–∞—Ç—å\\.$",
            "–ñ–∞–¥–Ω–∞—è .+ –≤—Å—ë –≥—Ä–µ–±—ë—Ç –ø–æ–¥ —Å–µ–±—è\\.$",
            "–í –≤–æ–¥—É —Ç—è–∂–µ–ª–æ –ø–ª—é—Ö–∞–µ—Ç—Å—è –ª–µ—Ç—É—á–∞—è .+\\.$",
            "–ü–æ–∫–∞ %hero% –∏—Å—Å–ª–µ–¥—É–µ—Ç –æ—Å—Ç—Ä–æ–≤, –Ω–∞ –∫–æ–≤—á–µ–≥ —Ç–∏—Ö–æ–Ω—å–∫–æ –ø—Ä–æ–∫—Ä–∞–±—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≤–∏–∑–∏—è\\.$",
            "–ú–∏–Ω–æ–≤–∞–≤ –≥—Ä–æ–∑–æ–≤–æ–π –ø–µ—Ä–µ–≤–∞–ª, –ø–æ—è–≤–ª—è–µ—Ç—Å—è .+\\.$",
            "–í—ã–ª–µ–∑—à–∏–π –∏–∑ –ø—Ä–∏–±—Ä–µ–∂–Ω–æ–π –∑–∞–≤–æ–¥–∏ —Å–≤—è—â–µ–Ω–Ω–∏–∫ –≤ —Ä—è—Å–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–æ–ª–∏—Ç–≤—É –∫–∞–ø–∏—Ç–∞–Ω–∞ %hero%\\.$",
            "–ò–∑ –ø—Ä–æ—Å—Ç–∏—Ä–∞—é—â–µ–≥–æ—Å—è –¥—ã–º–∞ –Ω–∞–¥ –≤–æ–¥–æ–π –≤—ã—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è .+\\.$",
            "–ù–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª–∞ .+, –ª–∏—à—å —Ö–≤–æ—Å—Ç–æ–º –ø–æ –≤–æ–¥–µ –ø–ª–µ—Å–Ω—É–ª–∞ –∏ —É—à–ª–∞ –≤ –≥–ª—É–±–æ–∫–æ–µ –º–æ—Ä–µ\\.$",
            "–í –ø–µ—Å–Ω—è—Ö –æ—Å—Ç—Ä–æ–≤–Ω—ã—Ö —Å–∏—Ä–µ–Ω %hero% —Å–ª—ã—à–∏—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ\\.$",
            ".+ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ —Ç—Ä–µ—Å–∫–æ–≤—ã–π –ø–æ—Ö–æ–¥\\.$",
            "%hero% —Ç–æ–ø–∏—Ç —á—É–¥–∏—â–µ\\. .+ –ø—Ä–æ—Ç–µ—Å—Ç—É–µ—Ç, –Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—Ö–ª—ë–±—ã–≤–∞–µ—Ç—Å—è\\.$",
            "–ü–æ–≤—Å—Ç—Ä–µ—á–∞–≤ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ —Ä–∞–∫–∞-–æ—Ç—à–µ–ª—å–Ω–∏–∫–∞, %hero% –º–æ–ª–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º\\.$",
            "%hero% –¥–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞—Å—Å–∫–∞–∑–∞–º –∞–±–æ—Ä–∏–≥–µ–Ω–æ–≤, —á—Ç–æ –Ω–∞ –∏—Ö –æ—Å—Ç—Ä–æ–≤–µ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ—Ç, –∏ –≤–æ–æ–±—â–µ –æ–Ω –Ω–µ–æ–±–∏—Ç–∞–µ–º\\.$",
            "–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–∞—è–∫, –∞ —Ç–∞–∫ ‚Äî –ø—Ä–æ–±–ª–µ—Å–∫–æ–≤—ã–π –º–∞—è—á–æ–∫, –≤–∏–¥–Ω–æ –æ—Ç—Å—é–¥–∞ –Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ –º–Ω–æ–≥–æ\\.$",
            "%hero% –Ω–∞—Ö–æ–¥–∏—Ç —Å–∫—É–¥–Ω—ã–µ –∑–∞–ø–∞—Å—ã –ø—Ä–æ–≤–∏–∑–∏–∏ –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –∏–º–∏ –Ω–µ –º–µ–Ω–µ–µ —Å–∫—É–¥–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω\\.$",
            "%hero% –∫–æ–Ω—Å—Ç–∞—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∫–ª–æ—á–æ–∫ —Å—É—à–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏ –Ω–µ –ø–æ—Å–µ—â–∞—Ç—å\\.$",
            "–í–æ–ª–Ω –ø–æ—á—Ç–∏ –Ω–µ—Ç, —Ç–∞–∫ —á—Ç–æ .+ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ\\.$",
            "–£–≤–∏–¥–µ–≤ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –∑–Ω–∞–∫–æ–º–æ–≥–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, %hero% –≤ —É–∂–∞—Å–µ –æ—Ç—á–∞–ª–∏–≤–∞–µ—Ç\\.$",
            "–®–∏–ø–∞—Å—Ç–∞—è .+ —ë–∂–∏—Ç—Å—è –≤ –≤–æ–ª–Ω–∞—Ö\\.$",
            "–ò–∑ –º–æ—Ä—Å–∫–æ–π –≥–ª—É–±–∏–Ω—ã –ø–æ–∫–∞–∑–∞–ª–∞—Å—å .+ —Å –≥–ª–∞–∑–∞–º–∏ –Ω–∞ –º–æ–∫—Ä–æ–º –º–µ—Å—Ç–µ\\.$",
            ".+ –∏–¥—ë—Ç –Ω–∞ –¥–Ω–æ, –∞ %hero% ‚Äî –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É\\.$",
            ".+ –∑–∞—Ö–ª–µ–±–Ω—É–ª–∞—Å—å\\. %hero% –≤—ã—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏–∑ –º–æ—Ä—Å–∫–æ–π –ø—É—á–∏–Ω—ã –ø—Ä–æ–≤–∏–∑–∏—é\\.$",
            "%hero% –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ –∑–∏–º—É—é—Ç –∏ —Å—ä–µ–¥–∞—é—Ç –≤—Å–µ –±–æ–Ω—É—Å—ã —Ä–∞–∫–∏\\.$",
            ".+ –ø—Ä–æ—Ç—è–Ω—É—Ç–∞ —á–µ—Ä–µ–∑ –∫–∏–ª—å\\. %hero% –≤—ã–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ –≤–æ–¥—ã –ø—Ä–æ–≤–∏–∑–∏—é\\.$",
            "%hero% –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ü–µ–ª–µ–±–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å–ø–µ—à–∏—Ç –æ–ø—Ä—ã—Å–∫–∞—Ç—å –∫–æ–≤—á–µ–≥ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º\\.$",
            "–ù–∞—Å–µ–ª—è—é—â–∏–µ —ç—Ç–æ—Ç –æ—Å—Ç—Ä–æ–≤ –∫–∞–Ω–Ω–∏–±–∞–ª—ã –¥–µ–ª—è—Ç—Å—è –ø—Ä–∏–ø–∞—Å–∞–º–∏ ‚Äî –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–≤–æ—â–∏ —É –Ω–∏—Ö –Ω–µ –≤ –ø–æ—á–µ—Ç–µ\\.$",
            "%hero% –æ—Å–≤—è—â–∞–µ—Ç –ø–æ–¥–≤–µ—Ä–Ω—É–≤—à–∏–µ—Å—è —Ä—É–∏–Ω—ã –∏ –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É –≤–æ–∑–Ω–æ—Å–∏—Ç –º–æ–ª–∏—Ç–≤—É\\.$",
            "–ò–∑-–ø–æ–¥ —Ç–æ–ª—â–∏ –≤–æ–¥—ã –ø—É—Å–∫–∞–µ—Ç –ø—É–∑—ã—Ä–∏ .+\\.$",
            ".+ –∏–¥—ë—Ç –Ω–∞ –¥–Ω–æ, –∞ %hero% ‚Äî –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º–∫—É\\.$",
            "%hero% –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è –Ω–∞ –ª–µ—Å–æ–ø–∏–ª–∫—É –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ –ø–æ—á–∏–Ω–∫—É —Å—É–¥–Ω–∞\\.$",
            ".+ —Ä–∞—Å–ø—Ä–∞–≤–ª—è—é—Ç –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫—Ä—ã–ª—å—è\\.$",
            "–†–µ–≤ —Å–∏—Ä–µ–Ω—ã —Ä–∞–∑–≥–æ–Ω—è–µ—Ç —Ç—É–º–∞–Ω –∏ %hero% –≤–∏–¥–∏—Ç –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏\\.$",
            "–ü–æ–≤–µ—Ä–∂–µ–Ω–Ω–∞—è .+ –≤—ã—Ç–∞—â–µ–Ω–∞ –Ω–∞ –ø–∞–ª—É–±—É, –∏ –≤ –µ—ë –±—Ä—é—Ö–µ %hero% –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Å–∞–º–∫—É\\.$",
            "–ó–µ–º–ª—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–≤—è—Ç–∞—è, —á—Ç–æ —Å–∞–º —Ñ–∞–∫—Ç –≤—ã—Å–∞–¥–∫–∏ —É–∂–µ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∫ –º–æ–ª–∏—Ç–≤–µ\\.$",
            "–ó–¥–µ—Å—å –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–æ–¥ –∫—É—Å—Ç–æ–º –≥–æ—Å—Ç—è –∂–¥—ë—Ç –∏ —Å—Ç–æ–ª, –∏ –¥–æ–º\\. %hero% –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –±–æ—Ä—Ç —Å –º–µ—à–∫–æ–º –ø—Ä–æ–≤–∏–∑–∏–∏ –≤ —Ä—É–∫–∞—Ö –∏ –≤–µ—Ç–æ—á–∫–∞–º–∏ –≤ –≤–æ–ª–æ—Å–∞—Ö\\.$",
            ".+ –ø—Ä–æ—Ç—è–Ω—É—Ç–∞ —á–µ—Ä–µ–∑ –∫–∏–ª—å\\. %hero% –≤—ã–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ –≤–æ–¥—ã –ø–æ–¥—Å–∫–∞–∑–∫—É\\.$",
            "%hero% –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∫–æ—Ä–Ω—è–º ‚Äî –±–æ–ª–µ–µ —Å–æ–ª–∏–¥–Ω–æ–π –ø–∏—â–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å\\.$",
            "–û—Å–≤–æ–±–æ–∂–¥—ë–Ω–Ω–∞—è –æ—Ç –≥—Ä—É–∑–∞ .+ –∫–∞–º–Ω–µ–º –ø–∞–¥–∞–µ—Ç –Ω–∞ –¥–Ω–æ\\. %hero% –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É\\.$",
            "%hero% –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ —Ç–æ–ª—å–∫–æ –≥–æ—Ä—É –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ, –æ–¥–Ω–∞–∫–æ, –Ω–µ–ø–ª–æ—Ö–æ –ø–æ–≤—ã—à–∞—é—Ç –ø–ª–∞–≤—É—á–µ—Å—Ç—å –∫–æ–≤—á–µ–≥–∞\\.$",
            "–ü–æ–ø–∞–¥–∞—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤–æ–∫ –∑–Ω–∞–Ω–∏–π, %hero% —É–∑–Ω–∞—ë—Ç, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø—Ä—è—Ç–∞–Ω –∫–ª–∞–¥\\.$",
            "%hero% –≤—Ç–æ—Ä–≥–∞–µ—Ç—Å—è –≤ –ø–∏—â–µ–≤—É—é —Ü–µ–ø—å –æ—Å—Ç—Ä–æ–≤–∞ –∏ —É–Ω–æ—Å–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –µ—ë –∑–≤–µ–Ω—å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–ø–∞—Å–æ–≤\\.$",
            "–í –∑–∞—Ä–æ—Å–ª—è—Ö –º–æ—Ä—Å–∫–æ–π –∫–∞–ø—É—Å—Ç—ã —Ä–æ–∂–¥–∞–µ—Ç—Å—è .+\\.$",
            "–£–≤–∏–¥–µ–≤, —á—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ, %hero% –±–ª–µ–¥–Ω–µ–µ—Ç –∏ –ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–µ—Ö —Å–≤—è—Ç—ã—Ö\\.$",
            "%hero% –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –Ω–∏–∫–∞–∫–æ–π –ø–∏—â–∏, –Ω–æ –º–æ–ª—å–±—ã –æ –Ω–µ–π –∏–¥—É—Ç –≤ –∑–∞—á—ë—Ç\\.$",
            ".+ —Ç–æ–Ω–µ—Ç, –∏—Å–ø—É—Å—Ç–∏–≤ –ø—Ä–æ—â–∞–ª—å–Ω—ã–π –∫—Ä–∏–∫ –∏ —Å–∞–º–∫—É\\.$",
    };

    private String ID = "";            // –ò–î –ø–æ—Ö–æ–¥–∞
    private Date sailDate;        // –î–∞—Ç–∞ –ø–æ—Ö–æ–¥–∞
    private int influence;    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–ª–∏—è–Ω–∏–π
    private int escape;       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–≥–æ–≤
    private int smallGetFish;    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–Ω–¥—É–∫–æ–≤ —Å —Ä—ã–±
    private int smallGetIceland; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–Ω–¥—É–∫–æ–≤ —Å –æ—Å—Ç—Ä–æ–≤–æ–≤
    private int bigGetFish;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞–¥–æ–≤ —Å —Ä—ã–±
    private int bigGetIceland;   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞–¥–æ–≤ —Å –æ—Å—Ç—Ä–æ–≤–æ–≤
    private int smallOut;     // –°—É–Ω–¥—É–∫–æ–≤ –≤—ã–≤–µ–∑–µ–Ω–æ
    private int bigOut;       // –ö–ª–∞–¥–æ–≤ –≤—ã–≤–µ–∑–µ–Ω–æ

    private int partNumber;   // –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø–æ—Ö–æ–¥–µ
    private String  partHero;     // –ì–µ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø–æ—Ö–æ–¥–µ
    private String  partGod;      // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø–æ—Ö–æ–¥–µ

    private int drown;        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–æ–Ω—É–≤—à–∏—Ö
    private int tugs;         // –ö–æ–ª–∏—á–µ—Å—Ç–æ–≤ –æ—Ç–±—É–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

    private int allBig;       // –í—Å–µ–≥–æ –≤—ã–≤–µ–∑–µ–Ω–æ –∫–ª–∞–¥–æ–≤
    private Document marine;      // –î–æ–∫—É–º–µ–Ω—Ç Jsoup —Å —Ö—Ä–æ–Ω–∏–∫–æ–π
    private static ChronicGetter logGetter = new AnyChronicGetter();

    public SailParser(String HTMLLog, String god){
        marine = Jsoup.parse(HTMLLog);

        // set Date
        try {
            String date = marine.select("div.lastduelpl_f>div").first().text().substring(5);
            sailDate = LOG_DATE_FORMATTER.parse(date);
        } catch (ParseException exception) {
            throw new RuntimeException("It's not log");
        }

        // set ID
        Elements lastDuel = marine.select(".lastduelpl");
        for (Element ld: lastDuel){
            String url = ld.select("a").first().attr("href");
            if (url.length()>0 && (ID.length() < 1)){
                ID = url.substring(url.lastIndexOf('/') + 1);
            }
        }
        // set Hero, god, number
        partGod = god;
        Pattern godHeroPattern = Pattern.compile("(\\d)\\. (.+) / (.+)");
        Pattern outputPattern  = Pattern.compile("\\[(.)]\\[(.+)]");
        // Parse Table
        for (int i = 1; i < 5 ; i++) {
            Elements Part = marine.select("div[id$=h_tbl] > div[class$=\"t_line saild_"+ i +"\"] > div[class$=c1]");
            Matcher matcher = godHeroPattern.matcher(Part.text());
            boolean isPart = false;

            if (matcher.find()) {
                isPart = god.equalsIgnoreCase(matcher.group(3));
                if (isPart){
                    partNumber = Integer.parseInt(matcher.group(1));
                    partHero   = matcher.group(2);
                }
            }

            //Drowned & Tugs
            String result = marine.select("div[id$=h_tbl] > div[class$=\"t_line saild_"+ i +"\"] > div[class$=c2] > span[class$=ple]").text();
            if (result.equalsIgnoreCase("—É—Ç–æ–Ω—É–ª")){
                drown++;
            }
            if (result.equalsIgnoreCase("–æ—Ç–±—É–∫—Å–∏—Ä–æ–≤–∞–Ω")){
                tugs++;
            }

            //Set output
            String output = marine.select("div[id$=h_tbl] > div[class$=\"t_line saild_"+ i +"\"] > div[class$=c2] > div > span[id$=pl_"+i+"_c]").text();
            Matcher outputMatcher = outputPattern.matcher(output);
            if (outputMatcher.find()){
                for (int j = 1; j < 3; j++) {
                    switch (outputMatcher.group(j)) {
                        case "\uD83D\uDCE6":
                            if (isPart) smallOut++;
                            break;
                        case "‚ôÇ":
                            if (isPart) bigOut++;
                            allBig++;
                            break;
                        case "‚ôÄ":
                            if (isPart) bigOut++;
                            allBig++;
                            break;
                        case "\uD83D\uDCB0":
                            if (isPart) bigOut++;
                            allBig++;
                            break;
                    }
                }
            }
        }
        Pattern small   = Pattern.compile("\uD83D\uDCE6$");
        Pattern bag     = Pattern.compile("\uD83D\uDCB0$");
        Pattern male    = Pattern.compile("‚ôÇ$");
        Pattern female  = Pattern.compile("‚ôÄ$");
        // parse turns
        for (int i = 0; i <= 100; i++) {
            Elements turns = marine.select("div[id$=fight_chronicle]>div[class$=\"afl block\"]>div[class$=\"d_content\"]>div[class$=\"new_line dtc t" + i + "  saild_"+ partNumber +"\"]");
            for (Element turn : turns) {
                if (!(turn.select("div[class$=\"text_content opp_infl\"]").isEmpty()) || !(turn.select("div[class$=\"text_content infl\"]").isEmpty())) {
                    influence++;
                } else {
                    String turnText = turn.text();
                    int found = 0;
                    for (String pat : escapes) {
                        if (found == 0) {
                            Pattern pattern = Pattern.compile(pat.replace("%hero%", partHero));
                            Matcher match = pattern.matcher(turnText);
                            if (match.find()) {
                                found++;
                                escape++;
                            }
                        }
                    }
                    if (found == 0) {
                        Matcher smMatch = small.matcher(turnText);
                        Matcher smBag = bag.matcher(turnText);
                        Matcher smMale = male.matcher(turnText);
                        Matcher smFemale = female.matcher(turnText);
                        if (smMatch.find()) {
                            for (String pat : smallFishGet) {
                                if (found == 0) {
                                    Pattern pattern = Pattern.compile(pat.replace("%hero%", partHero));
                                    Matcher match = pattern.matcher(turnText);
                                    if (match.find()) {
                                        found++;
                                        smallGetFish++;
                                    }
                                }
                            }
                            if (found == 0) for (String pat : smallIcelandGet) {
                                if (found == 0) {
                                    Pattern pattern = Pattern.compile(pat.replace("%hero%", partHero));
                                    Matcher match = pattern.matcher(turnText);
                                    if (match.find()) {
                                        found++;
                                        smallGetIceland++;
                                    }
                                }
                            }
                            if (found == 0) System.out.println(turnText);
                        }
                        if (smBag.find() || smMale.find() || smFemale.find()) {
                            for (String pat : bigFishGet) {
                                if (found == 0) {
                                    Pattern pattern = Pattern.compile(pat.replace("%hero%", partHero));
                                    Matcher match = pattern.matcher(turnText);
                                    if (match.find()) {
                                        found++;
                                        bigGetFish++;
                                    }
                                }
                            }
                            if (found == 0) for (String pat : bigIcelandGet) {
                                if (found == 0) {
                                    Pattern pattern = Pattern.compile(pat.replace("%hero%", partHero));
                                    Matcher match = pattern.matcher(turnText);
                                    if (match.find()) {
                                        found++;
                                        bigGetIceland++;
                                    }
                                }
                            }
                            if (found == 0) System.out.println(turnText);
                        }
                    }
                    if (found == 0){
                        for (String pat : empties) {
                            if (found == 0) {
                                Pattern pattern = Pattern.compile(pat.replace("%hero%", partHero));
                                Matcher match = pattern.matcher(turnText);
                                if (match.find()) {
                                    found++;
                                }
                            }
                        }
                    }
                    if (found == 0){
                        System.out.println('"' + turnText.replace(partHero, "%hero%").replace(".","\\\\.") + "$\",");
                    }
                }
            }
        }
    }

    public String toString(String delim) {
        return ID + delim
                + sailDate + delim
                + influence + delim
                + escape + delim
                + smallGetFish + delim
                + smallGetIceland + delim
                + bigGetFish + delim
                + bigGetIceland + delim
                + smallOut + delim
                + bigOut + delim
                + drown + delim
                + tugs  + delim
                + allBig + delim;
    }

    @Override
    public String toString() {
        return this.toString("; ");
    }

    public static String justCalculateLog(String ID, String Particiant){
        SailParser sailParser = new SailParser(logGetter.getHtml(ID),Particiant);
        return sailParser.toString();
    }
}
